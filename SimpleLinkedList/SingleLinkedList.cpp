#pragma once

#include "SingleLinkedList.h"

#include <iostream>


//================================================================================================================================================================
SingleLinkedList::SingleLinkedList(Node* head) : head(head)
{
}

//================================================================================================================================================================
void SingleLinkedList::view()
{
	for(Node* n = head; n != nullptr; n = n->next)
		std::cout << std::endl << n->data;
}

//================================================================================================================================================================
void SingleLinkedList::addFront(int n)
{
	Node* node = new Node(n, head);
	head       = node;
}

//================================================================================================================================================================
void SingleLinkedList::remove(int n)
{
	Node* temp = head;

	while(temp->next && temp->next->data != n)
		temp = temp->next;

	if(temp)
	{
		temp->next = temp->next->next;
	}
}

//================================================================================================================================================================
SingleLinkedList::~SingleLinkedList()
{

}

//================================================================================================================================================================
bool SingleLinkedList::find(int n)
{
	Node* temp = head;

	while(temp && temp->data != n)
		temp = temp->next;

	return temp;
}

//================================================================================================================================================================
void SingleLinkedList::reverse()
{
	Node* current = head;
	Node* prev    = nullptr;
	Node* next;

	while(current)
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}

	head = prev;
}

//================================================================================================================================================================
void SingleLinkedList::sort()
{

}

//================================================================================================================================================================
void SingleLinkedList::helperViewReversed(Node* root)
{
	if(!root)
		return;

	helperViewReversed(root->next);
	std::cout << root->data << "\n";
}

//================================================================================================================================================================
void SingleLinkedList::viewReversed()
{
	helperViewReversed(head);
}

//================================================================================================================================================================
SingleLinkedList::Node::Node(int data, Node* next /*= nullptr*/) : data(data), next(next)
{

}
