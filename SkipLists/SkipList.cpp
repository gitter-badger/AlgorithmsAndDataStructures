#include "SkipList.h"
#include <random>
#include <iostream>


//================================================================================================================================================================================================================================================================
SkipList::SkipList()
{
	head = nullptr;
	maxLevel = 0;

	std::random_device randomDevice;
	engine.seed(randomDevice());
}

//================================================================================================================================================================================================================================================================
void SkipList::insert(int element, int listLevel)
{
	Node* newNode = new Node(element);

	Node* n = head;

	if(!n)
		head = newNode;
	else
	{
		// find where to insert
		Node* prev = n;
		while(n && n->data < element)
		{
			prev = n;
			n = n->next[listLevel];
		}

		if(n == head)
		{
			head->next[listLevel] = n;
			n->next[listLevel] = head;
			head = n;
		}
		else
		{
			newNode->next[listLevel] = n;
			prev->next[listLevel] = newNode;
		}

		
		// propagate
		if(flipCoin())
			insert(element, ++listLevel);
	}
}

//================================================================================================================================================================
void SkipList::insert(int element)
{
	insert(element, 0);
}

//================================================================================================================================================================================================================================================================
bool SkipList::find(int element)
{
	return false;
}

//================================================================================================================================================================================================================================================================
void SkipList::view()
{
	maxLevel = 10;
	for(int level = 0; level <= maxLevel; level++)
	{
		std::cout << "L" << level << ": head-";
		for(Node* n = head; n != nullptr; n = n->next[level])
			std::cout << n->data << "-";
		std::cout << "NULL" << "\n";
	}
}

//================================================================================================================================================================
bool SkipList::flipCoin()
{
	return distribution(engine) % 2 == 0;
}
