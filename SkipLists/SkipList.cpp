#include "SkipList.h"

#include <random>
#include <iostream>
#include <limits>


//================================================================================================================================================================================================================================================================
SkipList::SkipList()
{
	header = new Node(std::numeric_limits<int>::min());	
	trail  = new Node(std::numeric_limits<int>::max());	

	header->next = trail;
	trail->prev  = header;

	height = 0;
}

//================================================================================================================================================================================================================================================================
void SkipList::insert(int element)
{
	Node* newNode = new Node(element);
	Node* p = find(element);

	newNode->next = p->next;
	newNode->prev = p;
	p->next->prev = newNode;
	p->prev = newNode;

}

//================================================================================================================================================================================================================================================================
SkipList::Node* SkipList::find(int element)
{
	SkipList::Node* n = header;

	while(true)
	{
		while(n->next != trail && n->next->data < element)
			n = n->next;

		if(n->down)
			n = n->down;
		else
			break;
	}

	return n;
}

//================================================================================================================================================================================================================================================================
void SkipList::view()
{
	for(Node* n = header; n != nullptr; n = n->next)
		std::cout << n->data << "-";
	std::cout << "NULL" << "\n";
}

//================================================================================================================================================================
bool SkipList::flipCoin()
{
	return distribution(engine) % 2 == 0;
}
